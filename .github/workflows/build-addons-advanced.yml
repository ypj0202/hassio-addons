name: Build and Upload Addon Images

on:
  push:
    branches: [ main, master ]
    paths:
      - '*/**'
      - '!README.md'
      - '!.github/**'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (leave empty for latest)'
        required: false
        default: ''

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-all:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Find all addons
        id: find-addons
        run: |
          echo "All directories found:"
          find . -maxdepth 1 -type d -name "*" | grep -v "^\.$" | grep -v "^\.git$" | grep -v "^\.github$" | sed 's|^\./||'
          echo ""
          
          # Only find directories that contain both config.json and Dockerfile
          ADDONS=$(find . -maxdepth 1 -type d -name "*" | grep -v "^\.$" | grep -v "^\.git$" | grep -v "^\.github$" | while read dir; do
            if [ -f "$dir/config.json" ] && [ -f "$dir/Dockerfile" ]; then
              echo "$(basename "$dir")"
            fi
          done | jq -R -s -c 'split("\n")[:-1]')
          echo "addons=$ADDONS" >> $GITHUB_OUTPUT
          echo "Found addons: $ADDONS"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push all addons
        run: |
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo ""
          
          # Only process directories that contain both config.json and Dockerfile
          for addon in $(find . -maxdepth 1 -type d -name "*" | grep -v "^\.$" | grep -v "^\.git$" | grep -v "^\.github$" | sed 's|^\./||'); do
            echo "Checking directory: $addon"
            echo "  - config.json exists: $([ -f "$addon/config.json" ] && echo "yes" || echo "no")"
            echo "  - Dockerfile exists: $([ -f "$addon/Dockerfile" ] && echo "yes" || echo "no")"
            
            # Check if this is a valid addon directory
            if [ ! -f "$addon/config.json" ] || [ ! -f "$addon/Dockerfile" ]; then
              echo "Skipping $addon - missing required files"
              continue
            fi
            
            echo "Building $addon..."
            
            # Extract upstream version from updater.json if it exists, otherwise use config.json version
            if [ -f "$addon/updater.json" ]; then
              UPSTREAM_VERSION=$(jq -r '.upstream_version' "$addon/updater.json")
              echo "Upstream version from updater.json: $UPSTREAM_VERSION"
              VERSION=$UPSTREAM_VERSION
            else
              VERSION=$(jq -r '.version' "$addon/config.json")
              echo "Version from config.json: $VERSION"
            fi
            
            # Build and push
            docker buildx build \
              --platform linux/amd64,linux/arm64,linux/arm/v7 \
              --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$addon:$VERSION \
              --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$addon:latest \
              --cache-from type=gha \
              --cache-to type=gha,mode=max \
              --push \
              ./$addon
          done

      - name: Update addon configs with new version (if specified)
        if: github.event.inputs.version != ''
        run: |
          for addon in $(find . -maxdepth 1 -type d -name "*" | grep -v "^\.$" | grep -v "^\.git$" | grep -v "^\.github$" | sed 's|^\./||'); do
            if [ ! -f "$addon/config.json" ] || [ ! -f "$addon/Dockerfile" ]; then
              continue
            fi
            
            echo "Updating $addon to version ${{ github.event.inputs.version }}..."
            
            # Update the image field in config.json with the new version
            jq --arg version "${{ github.event.inputs.version }}" \
               --arg image "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$addon:${{ github.event.inputs.version }}" \
               '.version = $version | .image = $image' "$addon/config.json" > "$addon/config.json.tmp"
            mv "$addon/config.json.tmp" "$addon/config.json"
            
            # Update updater.json if it exists
            if [ -f "$addon/updater.json" ]; then
              jq --arg version "${{ github.event.inputs.version }}" \
                 '.upstream_version = $version' "$addon/updater.json" > "$addon/updater.json.tmp"
              mv "$addon/updater.json.tmp" "$addon/updater.json"
              echo "Updated $addon/updater.json upstream_version to ${{ github.event.inputs.version }}"
            fi
            
            # Update Dockerfile if it references a specific version
            if grep -q "FROM.*:.*" "$addon/Dockerfile"; then
              sed -i "s/FROM.*:.*/FROM portainer\/portainer-ee:${{ github.event.inputs.version }}-alpine/" "$addon/Dockerfile"
              echo "Updated $addon/Dockerfile to use version ${{ github.event.inputs.version }}"
            fi
          done

      - name: Commit and push changes
        if: github.event.inputs.version != ''
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Update all addons to version ${{ github.event.inputs.version }}"
          git push
