name: Build and Upload Addon Images

on:
  push:
    branches: [ main, master ]
    paths:
      - '*/**'
      - '!README.md'
      - '!.github/**'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (leave empty for latest)'
        required: false
        default: ''

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-all:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Find all addons
        id: find-addons
        run: |
          echo "All directories found:"
          find . -maxdepth 1 -type d -name "*" | grep -v "^\.$" | grep -v "^\.git$" | grep -v "^\.github$" | sed 's|^\./||'
          echo ""
          
          # Only find directories that contain both config.json and Dockerfile
          ADDONS=$(find . -maxdepth 1 -type d -name "*" | grep -v "^\.$" | grep -v "^\.git$" | grep -v "^\.github$" | while read dir; do
            if [ -f "$dir/config.json" ] && [ -f "$dir/Dockerfile" ]; then
              echo "$(basename "$dir")"
            fi
          done | jq -R -s -c 'split("\n")[:-1]')
          echo "addons=$ADDONS" >> $GITHUB_OUTPUT
          echo "Found addons: $ADDONS"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push all addons
        run: |
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo ""
          
          # Only process directories that contain both config.json and Dockerfile
          for addon in $(find . -maxdepth 1 -type d -name "*" | grep -v "^\.$" | grep -v "^\.git$" | grep -v "^\.github$" | sed 's|^\./||'); do
            echo "Checking directory: $addon"
            echo "  - config.json exists: $([ -f "$addon/config.json" ] && echo "yes" || echo "no")"
            echo "  - Dockerfile exists: $([ -f "$addon/Dockerfile" ] && echo "yes" || echo "no")"
            
            # Check if this is a valid addon directory
            if [ ! -f "$addon/config.json" ] || [ ! -f "$addon/Dockerfile" ]; then
              echo "Skipping $addon - missing required files"
              continue
            fi
            
            echo "Building $addon..."
            
            # Extract version from config.json
            VERSION=$(jq -r '.version' "$addon/config.json")
            echo "Version: $VERSION"
            
            # Build and push
            docker buildx build \
              --platform linux/amd64,linux/arm64,linux/arm/v7 \
              --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$addon:$VERSION \
              --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$addon:latest \
              --cache-from type=gha \
              --cache-to type=gha,mode=max \
              --push \
              ./$addon
          done

      - name: Commit and push changes
        if: github.event.inputs.version != ''
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Update all addons to version ${{ github.event.inputs.version }}"
          git push

  test:
    runs-on: ubuntu-latest
    needs: [build-all]
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test addon configurations
        run: |
          # Only test directories that contain both config.json and Dockerfile
          for addon in $(find . -maxdepth 1 -type d -name "*" | grep -v "^\.$" | grep -v "^\.git$" | grep -v "^\.github$" | sed 's|^\./||'); do
            # Check if this is a valid addon directory
            if [ ! -f "$addon/config.json" ] || [ ! -f "$addon/Dockerfile" ]; then
              echo "Skipping $addon - missing required files"
              continue
            fi
            
            echo "Testing $addon configuration..."
            
            # Check if config.json exists and is valid JSON
            if [ -f "$addon/config.json" ]; then
              if jq empty "$addon/config.json" 2>/dev/null; then
                echo "✓ $addon/config.json is valid JSON"
              else
                echo "✗ $addon/config.json is invalid JSON"
                exit 1
              fi
            else
              echo "✗ $addon/config.json not found"
              exit 1
            fi
            
            # Check if Dockerfile exists
            if [ -f "$addon/Dockerfile" ]; then
              echo "✓ $addon/Dockerfile exists"
            else
              echo "✗ $addon/Dockerfile not found"
              exit 1
            fi
            
            # Validate required fields in config.json
            REQUIRED_FIELDS=("name" "version" "slug" "arch" "image")
            for field in "${REQUIRED_FIELDS[@]}"; do
              if jq -e ".$field" "$addon/config.json" >/dev/null 2>&1; then
                echo "✓ $field field exists"
              else
                echo "✗ Required field '$field' missing from $addon/config.json"
                exit 1
              fi
            done
          done
          
          echo "All addon configurations are valid!"

  notify:
    runs-on: ubuntu-latest
    needs: [build-all, test]
    if: always()
    
    steps:
      - name: Notify build status
        run: |
          if [ "${{ needs.test.result }}" == "success" ]; then
            echo "✅ All addons built and tested successfully!"
          else
            echo "❌ Build or test failed. Check the logs above."
          fi
